package com.example.footcare.diabeticcarethermal;

import android.Manifest;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.support.design.widget.TabLayout;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.GridView;

import com.daimajia.slider.library.SliderLayout;
import com.daimajia.slider.library.SliderTypes.TextSliderView;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

public class Gallery extends AppCompatActivity {

    /**
     * The {@link android.support.v4.view.PagerAdapter} that will provide
     * fragments for each of the sections. We use a
     * {@link FragmentPagerAdapter} derivative, which will keep every
     * loaded fragment in memory. If this becomes too memory intensive, it
     * may be best to switch to a
     * {@link android.support.v4.app.FragmentStatePagerAdapter}.
     */
    private SectionsPagerAdapter mSectionsPagerAdapter;

    /**
     * The {@link ViewPager} that will host the section contents.
     */
    private ViewPager mViewPager;
    boolean hasPermission;
    static final ArrayList<ImageClass> imageItems = new ArrayList<>(); // for gallery

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_gallery);
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_NOSENSOR);

        /*Request permission from the user*/
        ActivityCompat.requestPermissions(Gallery.this,
                new String[]{Manifest.permission.READ_EXTERNAL_STORAGE,
                        Manifest.permission.MANAGE_DOCUMENTS},
                1);

        hasPermission = ImageProcessing.checkPermission(getApplicationContext());

        /* Get the image Uri's from the database */
        DatabaseHelper myDB = new DatabaseHelper(this);
        Cursor res = myDB.getAllData(DatabaseHelper.TABLE_IMAGES);

        imageItems.clear(); // clear any remnant images

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        // Create the adapter that will return a fragment for each of the three
        // primary sections of the activity.
        mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());

        // Set up the ViewPager with the sections adapter.
        mViewPager = (ViewPager) findViewById(R.id.container);
        mViewPager.setAdapter(mSectionsPagerAdapter);

        TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);
        tabLayout.setupWithViewPager(mViewPager);

    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           String permissions[], int[] grantResults) {
        switch (requestCode) {
            case 1: {

                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {

                } else {
                    Log.d("Storage Access", "Storage Access Denied");
                }
                return;
            }
        }
    }


    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_gallery, menu);
        return true;
    }


    /**
     * A placeholder fragment containing a simple view. Generated by android studio
     */
    public static class PlaceholderFragment extends Fragment {
        /**
         * The fragment argument representing the section number for this
         * fragment.
         */
        private static final String ARG_SECTION_NUMBER = "section_number";
        AsyncTask imgLoad;

        public PlaceholderFragment() {
        }

        /**
         * Returns a new instance of this fragment for the given section
         * number.
         */
        public static PlaceholderFragment newInstance(int sectionNumber) {
            PlaceholderFragment fragment = new PlaceholderFragment();
            Bundle args = new Bundle();
            args.putInt(ARG_SECTION_NUMBER, sectionNumber);
            fragment.setArguments(args);
            return fragment;
        }


        /**
         *  Runs after onCreate and is specific to fragments */
        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {
            int sectionNumber = getArguments().getInt(ARG_SECTION_NUMBER);

            View rootView;

            /* Different Tabs */
            Log.d("SectionNumber", "The Section Number is: " + sectionNumber);
            if(sectionNumber == 1){ // overview tab
                rootView = inflater.inflate(R.layout.fragment_slideshow, container, false);
                Log.d("TAB TAB TAB", "Accessed the first tab");
            } else { // gallery tab
                rootView = inflater.inflate(R.layout.fragment_gallery, container, false);
            }

            new LoadTheImages(imageItems).execute(); // load the images async

            return rootView; // return the view
        }

        /**
         * Async task to load the images, loads all images at once in the background then
         * updates the UI when complete
         */
        private class LoadTheImages extends AsyncTask<Void, Integer, Void> {

            ArrayList<ImageClass> imgItems; // ArrayList to store the images
            int count = 0;

            public LoadTheImages(ArrayList<ImageClass> imgItems) {
                this.imgItems = imgItems;
                imgItems.clear();
            }

            @Override
            protected void onPreExecute() {
                super.onPreExecute();
            }

            /**
             * Method to update the UI after images loaded into ArrayList imgItems
             */
            private void updateUI(){
                Activity act = getActivity();
                SliderLayout sliderShow = (SliderLayout) act.findViewById(R.id.slider);
                sliderShow.removeAllSliders(); // ensures there are no leftover Images
                if(!imgItems.isEmpty()){
                    for(int i = 0; i < imgItems.size(); i++){
                        TextSliderView textSliderView = new TextSliderView(getContext());
                        textSliderView
                                .description(imgItems.get(i).getTitle())
                                .image(new File(imgItems.get(i).getUri().getPath()));

                        sliderShow.addSlider(textSliderView);
                    }
                }

                GridView imgGrid = (GridView) act.findViewById(R.id.imagesGrid);
                GalleryAdapter gridAdapter = new GalleryAdapter(getContext(), R.layout.grid_items, imageItems);
                imgGrid.setAdapter(gridAdapter);
                /* Open image in android viewer on click */
                imgGrid.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                    public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
                        ImageClass item = (ImageClass) parent.getItemAtPosition(position);
                        //Create intent
                        Intent intent = new Intent();
                        intent.setAction(Intent.ACTION_VIEW);
                        intent.setDataAndType(item.getUri(), "image/*");
                        intent.putExtra("title", item.getTitle());
                        intent.putExtra("image", item.getImage());

                        //Start details activity
                        startActivity(intent);
                    }
                });
            }

            @Override
            protected void onPostExecute(Void aVoid) {
                super.onPostExecute(aVoid);
                Log.d("RUNNING POST", "RUNNING POST EXECUTE");
                /**
                 * Check if activity is still there before updating the UI
                 * if the user navigates away from the gallery the relevant activity is null
                 * */
                if(getActivity() != null){
                    updateUI();
                }
                Log.d("COMPLETED POST", "POST EXECUTE COMPLETE");
                count++;
            }

            @Override
            protected Void doInBackground(Void...v) {
                /* Get the image Uri's from the database */
                DatabaseHelper myDB = new DatabaseHelper(getContext());
                Cursor res = myDB.getAllData(DatabaseHelper.TABLE_IMAGES);

                imageItems.clear(); // clear old images
                while (res.moveToNext()) { // iterate through db using cursor
                    Uri theUri = Uri.parse(res.getString(2));
                    Log.d("In Uri", "In Uri: " + theUri.getPath());
                    if(theUri != null && theUri.getPath() != ""){
                        Bitmap bit = null;
                        try {
                            bit = MediaStore.Images.Media.getBitmap(getContext().getContentResolver(), theUri);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        if(bit != null){
                            imageItems.add(new ImageClass(Bitmap.createScaledBitmap(bit, 100, 100, false), res.getString(3), theUri));
                        } else {
                            Log.d("Image Null", "Bitmap Image is null");
                        }
                    }
                }
                Log.d("BACKGROUND", "BACKGROUND TASK COMPLETED");
                return null;
            }
        }
    }

    /**
     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
     * one of the tabs.
     */
    public class SectionsPagerAdapter extends FragmentPagerAdapter {

        public SectionsPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int position) {
            // getItem is called to instantiate the fragment for the given page.
            // Return a PlaceholderFragment (defined as a static inner class below).
            return PlaceholderFragment.newInstance(position + 1);
        }

        @Override
        public int getCount() {
            // Show 3 total pages.
            return 2;
        }

        @Override
        public CharSequence getPageTitle(int position) {
            switch (position) {
                case 0:
                    return "SLIDESHOW";
                case 1:
                    return "OVERVIEW";
            }
            return null;
        }
    }


}
